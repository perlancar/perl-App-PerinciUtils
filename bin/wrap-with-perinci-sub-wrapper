#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our %SPEC;

$SPEC{wrap_with_perinci_sub_wrapper} = {
    v => 1.1,
    summary => 'Wrap subroutine with Perinci::Sub::Wrapper',
    description => <<'_',

This script is useful for testing Perinci::Sub::Wrapper. You specify input Rinci
metadata either using `--meta` or using `--url` to get it from Riap URL.

You then can show the code generated by the wrapper using `--show-code` (`-c`).

Or, you can call the wrapped function with one or more sets of arguments, by
supplying `--code` and one of: `--args`, `--multiple-args`, `--args-file`, or
`--multiple-args-file`.

_
    args_rels => {
        'req_one&' => [
            [qw/meta url/],
        ],
        # XXX code is not required if user uses url
        'choose_one&' => [
            [qw/args args_file multiple_args multiple_args_file/],
        ],
        # XXX: args, multiple_args, args_file, multiple_args_file only required if none of
        #'req_dep_any&' => [
        #    [],
        #],
    },
    args => {
        meta => {
            summary => 'Specify function metadata',
            schema => 'hash*',
            pos => 0,
            tags => ['category:meta-specification'],
        },
        url => {
            schema => 'str*',
            summary => 'Use function metadata from Riap URL',
            tags => ['category:meta-specification'],
        },
        # meta_file?
        code => {
            summary => 'Specify Perl code to wrap',
            schema => 'str*',
            tags => ['category:code-specification'],
        },

        args => {
            schema => ['hash*'],
            pos => 1,
            tags => ['category:argument-specification'],
        },
        multiple_args => {
            summary => 'Call with multiple args (array of args)',
            schema => ['array*', of=>'any'],
            tags => ['category:argument-specification'],
        },
        args_file => {
            schema => 'str*',
            summary => 'Retrieve args from file',
            description => <<'_',

JSON and YAML formats are supported. File type will be guessed from filename,
defaults to JSON.

_
            'x.schema.entity' => 'filename',
            tags => ['category:argument-specification'],
        },
        multiple_args_file => {
            schema => 'str*',
            summary => 'Retrieve multiple args from file',
            description => <<'_',

This is like `args_file` except that for multiple args. Content must be an
array.

_
            'x.schema.entity' => 'filename',
            tags => ['category:argument-specification'],
        },
        args_file_type => {
            schema => ['str*', in=>[qw/json yaml/]],
            summary => 'Give hint for args file type',
            tags => ['category:argument-specification'],
        },

        wrap => {
            schema => ['bool*', is=>1],
            default => 1,
            tags => ['category:wrapping'],
        },

        show_meta => {
            summary => "Don't call sub or wrap, show normalized metadata (before wrapping) only",
            schema => ['bool', is=>1],
            tags => ['category:action-selection'],
        },
        show_wrap_meta => {
            summary => "Don't call sub, show generated metadata after wrapping only",
            schema => ['bool', is=>1],
            tags => ['category:action-selection'],
        },
        show_wrap_code => {
            summary => "Don't call sub, show generated wrapper code only",
            schema => ['bool', is=>1],
            cmdline_aliases => {c=>{}},
            tags => ['category:action-selection'],
        },
        args_with_result => {
            summary => "Show args alongside with call result",
            description => <<'_',

The default is to show the call result only.

_
            schema => ['bool', is=>1],
            cmdline_aliases => {d=>{}},
            tags => ['category:output'],
        },
        with_debug => {
            summary => 'Generate wrapper with debug on',
            description => <<'_',

This means e.g. to pepper the wrapper code with more comments.

_
            schema => ['bool', is=>1],
            tags => ['category:wrapping'],
        },
        validate_args => {
            schema => ['bool'],
            default => 1,
            tags => ['category:wrapping'],
        },
        validate_result => {
            schema => ['bool'],
            default => 1,
            tags => ['category:wrapping'],
        },
        core => {
            summary => 'Whether to generate code which avoids the use of non-core modules',
            schema => ['bool'],
            tags => ['category:wrapping'],
        },
        core_or_pp => {
            summary => 'Whether to generate code which avoids the use of non-core XS modules',
            schema => ['bool'],
            description => <<'_',

In other words, generated code should stick with core or pure-perl modules.

_
            tags => ['category:wrapping'],
        },
        pp => {
            summary => 'Whether to generate code which avoids the use of XS modules',
            schema => ['bool'],
            tags => ['category:wrapping'],
        },

        linenum => {
            summary => 'When showing source code (--show-wrap-code), add line numbers',
            schema => ['bool', is=>1],
            cmdline_aliases => {l=>{}},
            tags => ['category:output'],
        },
    },
    examples => [
    ],
};
sub wrap_with_perinci_sub_wrapper {
    my %args = @_;

    my $code;
    if ($args{code}) {
        $code = eval "sub { $args{code} }";
    }

    my $meta;
    if (defined $args{meta}) {
        $meta = $args{meta};
    } elsif (defined $args{url}) {
        require Perinci::Access;
        my $pa = Perinci::Access->new;
        my $res = $pa->request(meta => $args{url});
        return $res unless $res->[0] == 200;
        $meta = $res->[2];

        if (!$code &&
                $args{url} =~ m!^(?:pl:)?/((?:[^/]+)(?:/[^/]+)*)/([^/]+)!) {
            no strict 'refs';
            my ($mod, $func) = ($1, $2);
            require "$mod.pm";
            $mod =~ s!/!::!g;
            $code //= \&{"$mod\::$func"};
        }
    }

    if ($args{show_meta}) {
        require Perinci::Sub::Normalize;
        return [200, "OK",
                Perinci::Sub::Normalize::normalize_function_metadata($meta)];
    }

  WRAP:
    {
        last unless $args{wrap};
        require Perinci::Sub::Wrapper;

        my %wrap_opts;
        {
            $wrap_opts{validate_args}   = $args{validate_args};
            $wrap_opts{validate_result} = $args{validate_result};
            $wrap_opts{debug}           = $args{with_debug};
            $wrap_opts{compile}         = 0 if $args{show_wrap_code};
            $wrap_opts{meta}            = $meta;
            $wrap_opts{sub}             = $code // sub {[200]};
            $wrap_opts{core}            = 1 if $args{core};
            $wrap_opts{core_or_pp}      = 1 if $args{core_or_pp};
            $wrap_opts{pp}              = 1 if $args{pp};
        }

        my $res = Perinci::Sub::Wrapper::wrap_sub(%wrap_opts);

        return $res unless $res->[0] == 200;

        $meta = $res->[2]{meta};

        if ($args{show_wrap_meta}) {
            require Data::Dump;
            return [200, "OK", Data::Dump::dump($meta),
                    {'cmdline.skip_format'=>1}];
        }

        if ($args{show_wrap_code}) {
            my $source = $res->[2]{source};
            $source .= "\n" unless $source =~ /\R\z/;
            if ($args{linenum}) {
                require String::LineNumber;
                $source = String::LineNumber::linenum($source);
            }
            return [200, "OK", $source, {'cmdline.skip_format'=>1}];
        }

        $code = $res->[2]{sub};
    }

    my $args;
    my $multiple;
    if (exists $args{args}) {
        $args = $args{args};
    } elsif ($args{multiple_args}) {
        $args = $args{multiple_args};
        $multiple = 1;
    } elsif (defined($args{args_file}) || defined($args{multiple_args_file})) {
        my $path;
        if (defined $args{args_file}) {
            $path = $args{args_file};
        } else {
            $path = $args{multiple_args_file};
            $multiple = 1;
        }
        my $type = $args{args_file_type};
        if (!$type) {
            if ($path =~ /\b(json)$/i) { $type = 'json' }
            elsif ($path =~ /\b(yaml|yml)$/i) { $type = 'yaml' }
            else { $type = 'json' }
        }
        if ($type eq 'json') {
            require File::Slurper;
            require JSON;
            my $ct = File::Slurper::read_text($path);
            $args = JSON->new->allow_nonref->decode($ct);
        } elsif ($type eq 'yaml') {
            require YAML::XS;
            $args = YAML::XS::LoadFile($path);
        } else {
            return [400, "Unknown args file type '$type', please specify json/yaml"];
        }
    } else {
        return [400, "Please specify 'args' or 'multiple_args' or 'args_file' or 'multiple_args_file'"];
    }
    if ($multiple) {
        return [400, "Multiple args must be an array"] unless ref($args) eq 'ARRAY';
    } else {
        return [400, "args must be a hash"] unless ref($args) eq 'HASH';
    }

    if ($multiple) {
        if ($args{args_with_result}) {
            return [200, "OK", [map {{args=>%$_, result=>$code->($_)}} @$args]];
        } else {
            return [200, "OK", [map {$code->(%$_)} @$args]];
        }
    } else {
        if ($args{args_with_result}) {
            return [200, "OK", {args=>$args, result=>$code->(%$args)}];
        } else {
            return [200, "OK", $code->(%$args)];
        }
    }

    [500, "BUG: This should not be reached"];
}

my $cli = Perinci::CmdLine::Any->new(
    url => '/main/wrap_with_perinci_sub_wrapper',
);
$cli->{common_opts}{naked_res}{default} = 1;
$cli->run;

# ABSTRACT:
# PODNAME:
