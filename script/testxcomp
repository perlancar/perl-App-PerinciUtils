#!perl

# DATE
# VERSION

BEGIN { $ENV{TRACE} // 1 }

use 5.010001;
use strict 'subs', 'vars';
use warnings;
use Log::ger;

use File::Which qw(which);
use Getopt::Long;
use Log::ger::Level::FromEnv;
use Log::ger::Output qw(Screen);
use String::ShellQuote;

my %Opts = (
);

# arguments to pass to x.completion routine
my %args;

my @inc = @INC;
Getopt::Long::Configure(
    'no_ignore_case', 'bundling', 'permute', 'pass_through',
    'auto_help', 'auto_version');
GetOptions(
    'include|I=s' => sub {
        unshift @inc, $_[1];
    },
    'arg=s%'  => \%args,
    'raw' => \$Opts{raw},
);

@ARGV or die "testxcomp: Please specify name of x.completion routine\n";
my $name = shift @ARGV;
my $mod = "Perinci::Sub::XCompletion::$name";
(my $mod_pm = "$mod.pm") =~ s!::!/!g;
{ local @INC = @inc; require $mod_pm };

my $routine = &{"$mod\::gen_completion"}();
my $res = $routine->(word => $ARGV[0], %args);
if ($Opts{raw}) {
    require Data::Dump;
    Data::Dump::dd($res);
} else {
    require Complete::Bash;
    print Complete::Bash::format_completion($res, {as=>'str'});
}

# ABSTRACT: Invoke Perinci::Sub::XCompletion::* completion routine
# PODNAME:

=head1 SYNOPSIS

 % testxcomp filename foo

will load L<Perinci::Sub::XCompletion::filename>, invoke its C<gen_completion()>
to get a completion routine, then run the completion routine with arguments: C<<
(word=>"foo") >>, then return the results one item per line.

 % testxcomp filename foo --arg filter=fx --arg starting_path=subdir

will do the same and run the completion routine with arguments: C<<
(word=>"foo", filter=>"fx", starting_path"=>"subdir") >>.

It's a quick way to test completion routine defined in a
Perinci::Sub::XCompletion::* module.


=head1 OPTIONS

=head2 --arg=s%

Specify arguments to pass to completion routine.

=head2 --raw

Instead of formatting the completion answer using L<Complete::Bash>'s
C<format_completion>, display the answer structure as Perl.


=head1 SEE ALSO

L<Perinci::Sub::XCompletion>

=cut
